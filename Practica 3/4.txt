4. En una mesa de exámenes hay 3 profesores que les deben tomar un examen oral a 30 alumnos
de acuerdo al orden de llegada. Cada examen es tomado por un único profesor. Cuando un 
alumno llega, espera a que alguno de los profesores (cualquiera) lo llame y se dirige al 
escritorio correspondiente a ese profesor, donde le tomará el examen; al terminar el 
profesor le da la nota y el alumno se retira. Cuando un profesor está libre llama al siguiente 
alumno. Nota: todos los procesos deben terminar su ejecución.


process Alumno[id:1..30]{
    int idProfe;
    int nota;
    Admin.llegada(id,idProfe);
    Escritorio[idProfe].hacerExamen(nota);
}

process Profesor[id:1..3]{
    int idAlumno;
    int contAlumno=0;
    while(contAlumno<29){
        Admin.proximo(id);
        Escritorio[id].darExamen();
        //CalcularNota(nota)
        Escritorio[id].darNota(nota,contAlumno);
    }
}

monitor Escritorio[id:1..3]{
    int notaAux,cont=0;
    boolean alumno=false;
    cond ok_examen,ok_nota,ok_alumno,resuelto,alguien;
    procedure hacerExamen(nota: out int){
        alumno=true;
        signal(alguien);
        wait(ok_examen);
        //resolver examen
        signal(resuelto);
        wait(ok_nota);
        nota=notaAux;
        signal(ok_alumno);
    }
    procedure darExamen(){
        if(not alumno){
            wait(alguien);
        }
        signal(ok_examen);
        wait(resuelto);
    }

    procedure darNota(nota: in int,contAlumno: out int){
        notaAux=nota;
        signal(ok_nota);
        wait(ok_alumno);
        cont++;
        contAlumno=cont;
    }
}


monitor Admin{
    cola pLibres;
    cola C;
    int cantLibres=0,esperando=0;
    cond turno;
    
    procedure llegada(id:in int,idProfe: out int){
        if(cantLibres==0){
            push(C,id);
            esperando++;
            wait(turno);
        }
        else{
            cantLibres--;
        }
        pop(pLibres,idProfe);
    }

    procedure proximo(idProfe:in int){
        push(pLibres,idProfe)
        if(esperando>0){
            esperando--;
            signal(turno);
        }
        else
            cantLibres++;
    }
}
