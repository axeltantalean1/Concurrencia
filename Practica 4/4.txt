Simular la atención en un locutorio con 10 cabinas telefónicas, que tiene un empleado que 
se encarga de atender a los clientes. Hay N clientes que al llegar esperan hasta que el 
empleado les indica a que cabina ir, la usan y luego se dirigen al empleado para pagarle. El 
empleado atiende a los clientes en el orden en que hacen los pedidos, pero siempre dando 
prioridad a los que terminaron de usar la cabina. Nota: maximizar la concurrencia; suponga 
que hay una función Cobrar() llamada por el empleado que simula que el empleado le cobra 
al cliente


process Cliente[id:0..N-1]{
    int idCabina;
    send avisoLlegue(id);
    receive cabinaAUsar[id](idCabina);

    send usarCabina[idCabina](1);
    receive finCabina[idCabina](ok);

    send pagar(id);
    receive listo_pagar(vuelto);

}

process Cabina[id:0..9]{
    while(true){
        receive usarCabina[id](ok);
        //usarCabina
        send finCabina[idCabina](1);
        send libereCabina(id);
    }
}

process Empleado{
    boolean cabinaLibre[10]={true [10]}
    int idCabina,idCliente;

    while(true){

        if (not empty(libereCabina)) -> receive libereCabina(idCabina);
                                        cabinaLibre[idCabina]=true;
                                        receive pagar(idCliente);
                                        Cobrar(id);
                                        send listo_pagar(vuelto);
           (not empty()) 
    }
}

